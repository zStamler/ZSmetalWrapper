cmake_minimum_required(VERSION 3.13)
cmake_policy(VERSION 3.13..3.29)
option(BUILD_SHARED_LIBS "Build using shared libraries" ON)

set(SRC_DIR ${PROJECT_SOURCE_DIR}/src)
set(CMAKE_INCLUDE_DIR ${PROJECT_SOURCE_DIR}/cmake)

# include any macros in the root-level cmake dir
file(GLOB MACROS ${CMAKE_INCLUDE_DIR}/*.macro)
foreach(MC ${MACROS})
        message(STATUS "Including macro ${MC}")
        include(${MC})
endforeach()

# build a list of all header files ..
set(PUBLIC_HEADERS_ALL "")
list(APPEND PUBLIC_HEADERS_ALL "_ZS_smart_pointer.hpp")
list(APPEND PUBLIC_HEADERS_ALL "ZS_metal_device.hpp")
list(APPEND PUBLIC_HEADERS_ALL "device_smart_pointer.hpp")
list(APPEND PUBLIC_HEADERS_ALL "ZS_md_profiler.hpp")
# .. then export them to the master wrapper header file..
set(PUBLIC_HEADERS_INCLUDE "")
foreach(HH ${PUBLIC_HEADERS_ALL})
        list(APPEND PUBLIC_HEADERS_INCLUDE "\#include <${HH}>\n")
endforeach()
string(REPLACE ";" "\n" PUBLIC_HEADERS_INCLUDE ${PUBLIC_HEADERS_INCLUDE})
set(REPLACE_TEST "it_was_replaced")
set(AUTO_GEN_WARNING "// TODO: read this!\n// This file was generated by cmake from the config file of the same name.\n//\tDO NOT edit this file directly, as any changes will be overwritten.\n//\tYou are warned!")
configure_file("${SRC_DIR}/metal_wrapper.hpp.in" "${SRC_DIR}/metal_wrapper.hpp" @ONLY)
# .. then add that to the list for installation
list(APPEND PUBLIC_HEADERS_ALL "metal_wrapper.hpp")

configure_file(config.hpp.in "${CMAKE_CURRENT_BINARY_DIR}/config.hpp" @ONLY)

# the final dynamic lib to be installed
add_library(ZSmetalWrapper 
        metal_wrapper.hpp
        metal_defines.cpp
        # smart pointer superclass
        _ZS_smart_pointer.hpp
        # metal_device and related
        ZS_metal_device.cpp
        ZS_metal_device.hpp 
        ZS_md_profiler.cpp 
        ZS_md_profiler.hpp 
        device_smart_pointer.hpp
        #
)
target_compile_features(ZSmetalWrapper PUBLIC cxx_std_17)
set_target_properties(ZSmetalWrapper PROPERTIES
        PUBLIC_HEADER 
        "${PUBLIC_HEADERS_ALL}"
)
target_include_directories(ZSmetalWrapper PRIVATE
        "/usr/local/include/metal-cpp"
        ${PROJECT_SOURCE_DIR}/src
)
add_osx_framework(Metal ZSmetalWrapper)
add_osx_framework(Foundation ZSmetalWrapper)

# define the installation
install(TARGETS ZSmetalWrapper
        EXPORT ZSmetalWrapperTargets
        LIBRARY DESTINATION "${INSTALL_LIB_DIR}" COMPONENT shlib
        PUBLIC_HEADER DESTINATION "${INSTALL_INCLUDE_DIR}/ZSmetalWrapper" COMPONENT dev
)


